const getData1 = new Promise((resolve, reject) => {
  const num = Math.random() * 10;
  console.log("Genareted number1", num);
  if (num > 1) {
    resolve({ num1: num });
  } else {
    reject({ err: "Data is not available1" });
  }
});

//...............................

const getData2 = new Promise((resolve, reject) => {
  const num = Math.random() * 10;
  console.log("Genareted number2", num);
  if (num > 1) {
    resolve({ num2: num });
  } else {
    reject({ err: "Data is not available2" });
  }
});

//.....................................

const getData3 = new Promise((resolve, reject) => {
  const num = Math.random() * 10;
  console.log("Genareted number3", num);
  if (num > 1) {
    resolve({ num3: num });
  } else {
    reject({ err: "Data is not available3" });
  }
});

// to run all the promise together important one for interview

Promise.all([getData1, getData2, getData3])
  .then((res) => console.log(res))
  .catch((error) => console.log(error));

// ****  If one gets rejected then the full system wil get rejected

// getData
//   .then((data) => console.log("Promise resolved", data))
//   .catch((error) => console.log(error));

// Promise explanation
/**
 * 1Ô∏è‚É£ Promise ‡¶ï‡ßÄ?

Promise ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø object ‡¶Ø‡¶æ future ‡¶è ‡¶ï‡ßã‡¶®‡ßã asynchronous ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ result handle ‡¶ï‡¶∞‡ßá‡•§

JS asynchronous ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá single-threaded, ‡¶§‡¶æ‡¶á future result (‡¶Ø‡ßá‡¶Æ‡¶® network request) handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Promise ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

Promise ‡ß©‡¶ü‡¶ø state ‡¶∞‡¶æ‡¶ñ‡ßá:

Pending ‚Üí ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶õ‡ßá, ‡¶è‡¶ñ‡¶®‡¶ì result ‡¶®‡ßá‡¶á

Fulfilled (Resolved) ‚Üí ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

Rejected ‚Üí ‡¶ï‡¶æ‡¶ú fail ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
 */

//............................

/**2Ô∏è‚É£ Promise ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
 * 
 * const myPromise = new Promise((resolve, reject) => {
  let success = true;
  if (success) {
    resolve("Work done"); // ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá
  } else {
    reject("Work failed"); // fail ‡¶π‡¶≤‡ßá
  }
});

resolve(value) ‚Üí promise ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá complete

reject(error) ‚Üí promise fail

 */

//......................................

/**3Ô∏è‚É£ Promise ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
 * myPromise
  .then((data) => console.log("Success:", data))
  .catch((err) => console.log("Error:", err));

  .then() ‚Üí handle success

.catch() ‚Üí handle error
 */

//...............................

/**4Ô∏è‚É£ Asynchronous ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
 * 
 * const fetchData = new Promise((resolve, reject) => {
  setTimeout(() => {
    const data = { name: "Yeasin" };
    resolve(data); // 2 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßá data return ‡¶ï‡¶∞‡¶¨‡ßá
  }, 2000);
});

console.log("Start");

fetchData
  .then((result) => console.log("Data received:", result))
  .catch((err) => console.log(err));

console.log("End");

 */

//........................

/**
 * 5Ô∏è‚É£ Key Points

Promise = future result handle ‡¶ï‡¶∞‡¶æ‡¶∞ object

States = Pending ‚Üí Fulfilled ‚Üí Rejected

.then() = success handle

.catch() = error handle

Asynchronous ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø callback ‡¶è‡¶∞ alternative, cleaner ‡¶ì readable
 */

//......................................

/**
 * ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá:

Promise = ‚Äú‡¶Ü‡¶Æ‡¶ø future ‡¶è ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨, ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá success ‡¶¨‡¶æ fail ‡¶¨‡¶≤‡ßá ‡¶¶‡¶ø‡¶¨‡•§‚Äù
 */

//..............................

/**
 * 1Ô∏è‚É£ Promise.all() ‡¶ï‡ßÄ?

Promise.all() ‡¶è‡¶ï‡¶ü‡¶ø built-in JS method ‡¶Ø‡¶æ multiple promises ‡¶ï‡ßá ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá handle ‡¶ï‡¶∞‡ßá‡•§

‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø array of promises ‡¶®‡ßá‡¶Ø‡¶º‡•§

‡¶∏‡¶¨ promises success ‡¶π‡¶≤‡ßá ‚Üí result array return ‡¶ï‡¶∞‡ßá

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø promise reject ‡¶π‡¶Ø‡¶º ‚Üí ‡¶™‡ßÅ‡¶∞‡ßã Promise.all reject ‡¶π‡¶Ø‡¶º


 */

//...............................
/**
 * üí° ‡¶∏‡¶π‡¶ú ‡¶ï‡¶•‡¶æ‡¶Ø‡¶º:

Promise.all = ‚Äú‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï promises ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì, ‡¶∏‡¶¨ success ‡¶π‡¶≤‡ßá result array, ‡¶ï‡ßã‡¶®‡ßã fail ‡¶π‡¶≤‡ßá error‡•§‚Äù
 */
