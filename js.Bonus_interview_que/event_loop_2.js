function one() {
  two();
  console.log(1);
}
function two() {
  three();
  console.log(2);
}
function three() {
  setTimeout(() => {
    console.log("Inside three timeout", 4);
  }, 4000);
  four();
  console.log(3);
}
function four() {
  setTimeout(() => {
    console.log("Inside timout 5");
  });
  five();
  console.log(4);
}
function five() {
  console.log(5);
}

one();

// Maintains call-stack and beside it maintains EventQueue
// first it do its stack work then hold others in queue after completing it
// it completes or call the queue list and set them by serial

// Notes

/**JavaScript Event Loop
1. Introduction

JavaScript рж╣рж▓рзЛ single-threaded тЖТ ржПржХ рж╕ржоржпрж╝рзЗ ржПржХржЯрж╛ржЗ ржХрж╛ржЬ execute ржХрж░рждрзЗ ржкрж╛рж░рзЗред

ржХрж┐ржирзНрждрзБ ржЖржорж░рж╛ ржЪрж╛ржЗ asynchronous ржХрж╛ржЬ (network request, timer, DOM events) handle ржХрж░рждрзЗ тЖТ Event Loop ржПржЦрж╛ржирзЗ ржХрж╛ржЬ ржХрж░рзЗред

Event Loop рж╣рж▓рзЛ JS engine ржПрж░ mechanism, ржпрж╛ asynchronous operations ржХрзЗ main thread ржП execute ржХрж░рж╛ржпрж╝ред

2. Components of Event Loop

Call Stack

JS ржХрзЛржб ржпрзЗ sequence ржП execute рж╣ржЪрзНржЫрзЗ рждрж╛ track ржХрж░рзЗред

Function call рж╣рж▓рзЗ push тЖТ function end рж╣рж▓рзЗ popред

Web APIs / Background

Browser/Node.js provide ржХрж░рзЗ asynchronous tasks handle ржХрж░рж╛рж░ ржЬржирзНржпред

Example: setTimeout, fetch, DOM eventsред

Callback Queue (Task Queue)

Asynchronous task complete рж╣рж▓рзЗ callback ржПржЦрж╛ржирзЗ рж░рж╛ржЦрж╛ рж╣ржпрж╝ред

Event Loop check ржХрж░рзЗ тЖТ ржпржжрж┐ Call Stack ржЦрж╛рж▓рж┐ тЖТ callback push ржХрж░рзЗ executeред

Microtask Queue

Promise ржПрж░ .then() ржмрж╛ async/await ржПрж░ result handle ржХрж░рзЗред

Higher priority тЖТ Call Stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ ржкрзНрж░ржержо execute рж╣ржпрж╝ред

3. How it Works (Step by Step)

JS code start тЖТ Global Execution Context push Call Stack ржП

Synchronous code execute рж╣ржпрж╝ line by line

Asynchronous task (timer, fetch) background ржП ржЪрж▓рзЗ

Task complete рж╣рж▓рзЗ тЖТ callback Queue рждрзЗ push рж╣ржпрж╝

Event Loop check ржХрж░рзЗ тЖТ Call Stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ callback execute рж╣ржпрж╝

Microtask Queue ржПрж░ tasks callback Queue ржПрж░ ржЖржЧрзЗ execute рж╣ржпрж╝

4. Example
console.log("Start");

setTimeout(() => {
  console.log("Timeout");
}, 0);

Promise.resolve().then(() => {
  console.log("Promise");
});

console.log("End");


.......

Output:
Start
End
Promise
Timeout

...........

Explanation:

"Start" тЖТ synchronous тЖТ print

setTimeout тЖТ background тЖТ 0ms later callback queue

Promise тЖТ microtask queue тЖТ main thread ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ execute

"End" тЖТ synchronous

Event Loop тЖТ microtask (Promise) ржЖржЧрзЗ execute

Callback queue (Timeout) ржкрж░рзЗ execute

........................

5. Key Points

JS single-threaded тЖТ ржПржХ рж╕ржоржпрж╝рзЗ ржПржХржЯрж╛ржЗ code execute

Event Loop тЖТ asynchronous task handle ржХрж░рзЗ

Microtask queue тЖТ higher priority (Promise, async/await)

Callback queue тЖТ lower priority (setTimeout, setInterval, DOM events)

рж╕ржарж┐ржХржнрж╛ржмрзЗ ржмрзБржЭрж▓рзЗ asynchronous JS ржХрзЛржб рж╕рж╣ржЬрзЗ manage ржХрж░рж╛ ржпрж╛ржпрж╝

ЁЯТб Easy Summary:

Event Loop = JS engine ржПрж░ traffic controller, ржпрж╛ asynchronous task ржХрзЗ sequence ржЕржирзБржпрж╛ржпрж╝рзА main thread ржП execute ржХрж░рж╛ржпрж╝редs
 * 
 */
