/**
 * 
 * 1.What is V* engine
 * ==> 
 * 
V8 Engine ‡¶π‡¶≤‡ßã Google Chrome ‡¶è‡¶¨‡¶Ç Node.js-‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ JavaScript Engine‡•§

‡¶è‡¶ü‡¶ø C++ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ‡•§

JS ‡¶ï‡ßã‡¶°‡¶ï‡ßá ‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶≤‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ó‡ßÅ‡¶Ø‡¶º‡ßá‡¶ú‡ßá compile ‡¶ï‡¶∞‡ßá ‚Üí ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ execute ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

V8 Just-In-Time (JIT) Compilation ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶°‡¶ï‡ßá runtime-‡¶è optimize ‡¶ï‡¶∞‡ßá‡•§
 */

// ...................................

/**
 * 2.How does V8 engine works in JS?
 * ==>
 * V8 ‡¶Æ‡ßÇ‡¶≤‡¶§ C++ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø JavaScript Engine‡•§ ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú ‡ß™‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶π‡¶Ø‡¶º:
 * 
 * .....................................
 * 1Ô∏è‚É£ Parsing (‡¶™‡¶°‡¶º‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶ù‡¶æ)

V8 ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá JS ‡¶ï‡ßã‡¶° ‡¶™‡¶°‡¶º‡ßá‡•§

‡¶ï‡ßã‡¶°‡¶ï‡ßá tokenize ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç Abstract Syntax Tree (AST) ‡¶¨‡¶æ‡¶®‡¶æ‡¶Ø‡¶º‡•§

AST ‡¶π‡¶≤‡ßã ‡¶ï‡ßã‡¶°‡ßá‡¶∞ structure ‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø internal representation‡•§
Ex- let x = 5 + 10;

.............................................
2Ô∏è‚É£ Ignition: Interpreter

AST ‡¶•‡ßá‡¶ï‡ßá Ignition interpreter ‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶ï‡ßã‡¶°‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

‡¶ï‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá interpreted mode-‡¶è ‡¶ö‡¶≤‡ßá ‚Üí ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ compile ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ execute ‡¶π‡¶Ø‡¶º‡•§

‡¶è‡¶ü‡¶ø startup performance ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶Ø‡¶º‡•§

.................................................

3Ô∏è‚É£ TurboFan: Optimizing Compiler

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã function ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ run ‡¶π‡¶Ø‡¶º, V8 ‡¶§‡¶æ TurboFan optimizer ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá optimize ‡¶ï‡¶∞‡ßá‡•§

Optimized machine code ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ execute ‡¶π‡¶Ø‡¶º‡•§

‡¶è‡¶á JIT (Just-In-Time) compilation engine performance ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶Ø‡¶º‡•§

....................................................

4Ô∏è‚É£ Execution & Memory Management

V8 Call Stack ‡¶è function execution track ‡¶ï‡¶∞‡ßá‡•§

Heap-‡¶è objects ‡¶è‡¶¨‡¶Ç memory allocate ‡¶π‡¶Ø‡¶º‡•§

Garbage Collector (GC) ‡¶Ö‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º objects ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶¶‡ßá‡¶Ø‡¶º‡•§


.....................................................
V8 Summary

1.Parsing ‚Üí AST ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã

2.Ignition ‚Üí Interpreter ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá run ‡¶ï‡¶∞‡¶æ

3TurboFan ‚Üí Optimizing compilation

4.Execution ‚Üí Call Stack + Heap + GC

üí° ‡¶∏‡¶π‡¶ú ‡¶ï‡¶•‡¶æ‡¶Ø‡¶º:

V8 ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ï‡ßã‡¶° ‡¶¨‡ßã‡¶ù‡ßá ‚Üí run ‡¶ï‡¶∞‡ßá ‚Üí ‡¶Ø‡¶¶‡¶ø frequent ‡¶π‡¶Ø‡¶º ‚Üí optimize ‡¶ï‡¶∞‡ßá ‚Üí memory efficient execution ‡¶¶‡ßá‡¶Ø‡¶º‡•§
 */

// .............................................

/***
 * Execution Context ‡¶ï‡ßÄ?

Execution Context ‡¶π‡¶≤‡ßã JavaScript-‡¶è ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ø‡¶æ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∞‡¶æ‡¶ñ‡ßá (variables, functions, scope, this)‡•§

1.‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø function call ‡¶¨‡¶æ global code execution ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ Execution Context ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡•§

2.‡¶è‡¶ü‡¶æ JS engine ‡¶ï‡ßá ‡¶¨‡¶≤‡ßá: ‚Äú‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá execute ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶ï‡ßã‡¶® variable ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡ßá‚Äù‡•§
 * 

// .....................................

2. Execution Context ‡¶è‡¶∞ ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶Ö‡¶Ç‡¶∂

1.Variable Environment

‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ variables, functions store ‡¶π‡¶Ø‡¶º‡•§

Example: let a = 5; ‚Üí a ‡¶è‡¶ñ‡¶æ‡¶®‡ßá save ‡¶π‡¶¨‡ßá‡•§

2.Scope Chain

JS ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã variable ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá, execution context scope chain ‡¶¶‡ßá‡¶ñ‡ßá‡•§

‡¶Ø‡¶¶‡¶ø variable local ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚Üí parent scope ‚Üí global scope ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá‡•§

3.This Value

‡¶Ø‡ßá‡¶ü‡¶æ this keyword ‡¶ï‡ßá point ‡¶ï‡¶∞‡ßá‡•§

Global context ‚Üí this = window (browser), Node.js ‚Üí global object

// .............................

3. Execution Context ‡¶è‡¶∞ ‡¶ß‡¶∞‡¶£

1.Global Execution Context

‡¶∏‡¶¨ JS ‡¶ï‡ßã‡¶° run ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ context‡•§

‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ page load ‡¶π‡¶≤‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡•§

2.Function Execution Context

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø function call ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ context ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡•§

Function ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá context remove ‡¶π‡¶Ø‡¶º (stack ‡¶•‡ßá‡¶ï‡ßá pop)‡•§


.................................................

4. Call Stack & Execution Context

JS engine call stack ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá execution context track ‡¶ï‡¶∞‡ßá‡•§

Example:

function first() {
    console.log("first");
    second();
}

function second() {
    console.log("second");
}

first();


// summary

Call Stack Behavior:

1.Global context push

2.first() call ‚Üí first context push

3.second() call ‚Üí second context push

4.second() finish ‚Üí pop second context

5.first() finish ‚Üí pop first context

6.Global context finish

 * 
 */
